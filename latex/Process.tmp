

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{Processes}
\label{sec:process}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\RuleDef{process}{
  \Literal{begin}, \Sequence{\RuleRef{action paragraph}} \Literal{@}, \RuleRef{action}, \Literal{end} \\
  \Alt\ \RuleRef{process}, \Literal{;}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{[]}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{|\mytilde|}, \RuleRef{process} \\ 
  % generalised parallelism
  \Alt\ \RuleRef{process}, \Literal{[|}, \RuleRef{chanset expression}, \Literal{|]}, \RuleRef{process} \\ 
  % alphabetised parallelism
  \Alt\ \RuleRef{process}, \Literal{[}, \RuleRef{chanset expression}, \Literal{||}, \RuleRef{chanset expression}, \Literal{]}, \RuleRef{process} \\ 
  % synchronous parallelism
  \Alt\ \RuleRef{process}, \Literal{||}, \RuleRef{process} \\ 
  % interleaving
  \Alt\ \RuleRef{process}, \Literal{|||}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{/\mybackslash}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{/(}, \RuleRef{expression}, \Literal{)\mybackslash}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{[>}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{[(}, \RuleRef{expression}, \Literal{)>}, \RuleRef{process} \\ 
  \Alt\ \RuleRef{process}, \Literal{\mybackslash\mybackslash}, \RuleRef{chanset expression} \\ 
  \Alt\ \RuleRef{process}, \Literal{startsby}, \RuleRef{expression} \\ 
  \Alt\ \RuleRef{process}, \Literal{endsby}, \RuleRef{expression} \\ 
  \Alt\ \Literal{(}, \RuleRef{parametrisation}, \Literal{@}, \RuleRef{process}, \Literal{)}, \\
        \quad \Literal{(}, \xSepList{,}{\RuleRef{expression}}, \Literal{)} \\ 
  \Alt\ \RuleRef{identifier}, \Optional{\Literal{(}, \Sequence{\RuleRef{expression}}, \Literal{)}} \\ 
  \Alt\ \RuleRef{process}, \RuleRef{renaming expression} \\ 
  \Alt\ \Literal{;}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\ 
  \Alt\ \Literal{[]}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\ 
  \Alt\ \Literal{|\mytilde|}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\ 
  % iterated generalised parallelism
  \Alt\ \Literal{[|}, \RuleRef{chanset expression}, \Literal{|]}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\ 
  % iterated alphabetised parallelism
  \Alt\ \Literal{||}, \RuleRef{replication declarations}, \Literal{@}, \Literal{[}, \RuleRef{chanset expression}, \Literal{]}, \RuleRef{process} \\
  % iterated synchronous parallelism
  \Alt\ \Literal{||}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\
  \Alt\ \Literal{|||}, \RuleRef{replication declarations}, \Literal{@}, \RuleRef{process} \\
  % parenthesised process
  \Alt\ \Literal{(}, \RuleRef{process}, \Literal{)}
}

\RuleDef{action paragraph}{
  \RuleRef{type declarations} \\
  \Alt\ \RuleRef{value declarations} \\
  \Alt\ \RuleRef{function declarations} \\
  \Alt\ \RuleRef{operation declarations} \\
  \Alt\ \RuleRef{action declarations} \\
  \Alt\ \RuleRef{nameset declarations} \\
  \Alt\ \RuleRef{state declarations}
}

\RuleDef{renaming expression}{
    \Literal{[[}, \CommaSepList{\RuleRef{renaming pair}}, \Literal{]]} \\
    \Alt\ \Literal{[[}, \RuleRef{renaming pair}, \Literal{|} \RuleRef{bind list}, \Optional{\Literal{@}, \RuleRef{expression}}, \Literal{]]}
} 
 
  Note that the \RuleRef{renaming pair} is used to allow a sequence of
  `.'-separated expressions.  Here we allow only a single expression;
  consider: is \texttt{a.x.y} the identifier \texttt{a} followed by
  the expression \texttt{x.y}, or by two expressions, \texttt{x}
  and~\texttt{y}?  We may extend this to full sequences of
  `.'-separated expressions with restricted expressions in the future.

\RuleDef{renaming pair}{
  \RuleRef{identifier}, \Optional{\Literal{.}, \RuleRef{expression}},
    \Literal{<-}, \RuleRef{identifier}, \Optional{\Literal{.}, \RuleRef{expression}} 
}

\RuleDef{replication declarations}{
  \xSepList{,}{\RuleRef{replication declaration}}
}

\RuleDef{replication declaration}{
        \xSepList{,}{\RuleRef{identifier}}, \Literal{:}, \RuleRef{type} \\
  \Alt\ \xSepList{,}{\RuleRef{identifier}}, \Literal{in set}, \RuleRef{expression} \\
}
