%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{Operations}
\label{sec:oper-decl}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Operations do not include reactive constructs; while the parser will
accept any action in an operation body, the typechecker will only
allow statements, the \Literal{;} sequential composition operator, and
the constant action \Literal{Skip}.  In essence, operation bodies in
CML allow only what is allowed in VDM operation bodies.

\RuleDef{operation declarations}{
  \Literal{operations}, \Sequence{\RuleRef{operation definition}}
}

\RuleDef{operation definition}{
  \RuleRef{explicit operation definition} \\
  \Alt\ \RuleRef{implicit operation definition}
}

\RuleDef{explicit operation definition}{
  \Optional{\RuleRef{qualifier}}, \RuleRef{identifier}, \Literal{:}, \RuleRef{operation type}, \\
  \RuleRef{identifier}, \RuleRef{parameters}, \Literal{{\tt ==}}, \RuleRef{operation body}, \\
  \Optional{\Literal{pre}, \RuleRef{expression}}, \\
  \Optional{\Literal{post}, \RuleRef{expression}}
}

\RuleDef{operation type}{
  \RuleRef{discretionary type}, \Literal{==>}, \RuleRef{discretionary type}
}

\RuleDef{operation body}{
  \RuleRef{action} \\
  \Alt\ \Literal{is subclass responsibility} \\
  \Alt\ \Literal{is not yet specified}
}

\RuleDef{implicit operation definition}{
  \Optional{\RuleRef{qualifier}}, \RuleRef{identifier}, \RuleRef{parameter types}, \Optional{\RuleRef{identifier type pair list}}, \\
  \Optional{\RuleRef{frame}}, \\
    \Optional{\Literal{pre}, \RuleRef{expression}}, \\
    \Literal{post}, \RuleRef{expression}
}

\RuleDef{frame}{
  \Literal{frame}, \RuleRef{var information}, \Sequence{\RuleRef{var information}}
}

\RuleDef{var information}{
  \Literal{rd}, \xSepList{,}{\RuleRef{name}}, \Optional{\Literal{:}, \RuleRef{type}} \\
  \Alt\ \Literal{wr}, \xSepList{,}{\RuleRef{name}}, \Optional{\Literal{:}, \RuleRef{type}}
}


